/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-01-04 13:48:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery.csv;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class autoComplete_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ajax::jquery::autoComplete</title>\r\n");
      out.write("<style>\r\n");
      out.write("\tdiv.wrapper{\r\n");
      out.write("\t\tposition: relative;\r\n");
      out.write("\t}\r\n");
      out.write("\tul#autoComplete{\r\n");
      out.write("\t\tbackground-color: white; \r\n");
      out.write("\t\tmin-width: 159px; \r\n");
      out.write("\t\tborder: 1px solid gray; \r\n");
      out.write("\t\tposition: absolute; \r\n");
      out.write("\t\ttop: 22px; \r\n");
      out.write("\t\tpadding:0; \r\n");
      out.write("\t\tmargin:0;\r\n");
      out.write("\t}\r\n");
      out.write("\tul#autoComplete li{\r\n");
      out.write("\t\tpadding:0 10px; \r\n");
      out.write("\t\tlist-style:none; \r\n");
      out.write("\t\tcursor:pointer;\r\n");
      out.write("\t}\r\n");
      out.write("\tul#autoComplete li.sel{\r\n");
      out.write("\t\tbackground:lightseagreen; \r\n");
      out.write("\t\tcolor:white;\r\n");
      out.write("\t}\r\n");
      out.write("\tspan.searchVal{\r\n");
      out.write("\t\tcolor:red;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/jquery/jquery-3.4.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$autoComplete = $(\"#autoComplete\");\r\n");
      out.write("\t$autoComplete.hide(); //페이지 최초 로딩시 조회결과 ul태그는 안보이게 처리한다.\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#searchName\").on('keyup',function(e){\r\n");
      out.write("\t\t//방향키 제어 ArrowDown, ArrowUp, Enter\r\n");
      out.write("\t\tconsole.log(e.key);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar $sel = $(\".sel\");\r\n");
      out.write("\t\tvar $li = $autoComplete.children(\"li\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(e.key == 'ArrowDown'){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif($sel.length==0){\r\n");
      out.write("\t\t\t\t$li.first().addClass(\"sel\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse{\r\n");
      out.write("\t\t\t\t$sel.removeClass(\"sel\")\r\n");
      out.write("\t\t\t\t\t.next()\r\n");
      out.write("\t\t\t\t\t.addClass(\"sel\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse if(e.key == 'ArrowUp'){\r\n");
      out.write("\t\t\tif($sel.length != 0){\r\n");
      out.write("\t\t\t\t$sel.removeClass(\"sel\")\r\n");
      out.write("\t\t\t\t\t.prev()\r\n");
      out.write("\t\t\t\t\t.addClass(\"sel\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse{\r\n");
      out.write("\t\t\t\t$li.last().addClass(\"sel\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse if(e.key == 'Enter'){\r\n");
      out.write("\t\t\t$(this).val($sel.text());\r\n");
      out.write("\t\t\t$autoComplete.hide().children().remove();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\tvar searchNameVal = $(this).val().trim();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//공백 입력시 ajax요청을 보내지 않는다.\r\n");
      out.write("\t\t\tif(searchNameVal.length == 0) {\r\n");
      out.write("\t\t\t\t$(\"#list\").html(\"\");\r\n");
      out.write("\t\t\t\t$autoComplete.hide();\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl: \"");
      out.print(request.getContextPath());
      out.write("/jquery/autoComplete\",\r\n");
      out.write("\t\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\t\t//data: \"searchName=\"+searchNameVal,\r\n");
      out.write("\t\t\t\tdata: {searchName: searchNameVal},//객체로 전달해도 jquery가 직렬화 처리한다.\r\n");
      out.write("\t\t\t\tsuccess: function(data){\r\n");
      out.write("\t\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//조회된 결과가 없는 경우\r\n");
      out.write("\t\t\t\t\tif(data.trim().length==0){\r\n");
      out.write("\t\t\t\t\t\t$autoComplete.hide();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t//조회된 결과가 있는 경우\r\n");
      out.write("\t\t\t\t\telse{ \r\n");
      out.write("\t\t\t\t\t\tvar dataArr = data.split(',');\r\n");
      out.write("\t\t\t\t\t\tvar html = \"\";\r\n");
      out.write("\t\t\t\t\t\t$.each(dataArr, (idx,val)=>{\r\n");
      out.write("\t\t\t\t\t\t\t//html += \"<li>\"+val+\"</li>\";\r\n");
      out.write("\t\t\t\t\t\t\thtml += \"<li>\"+val.replace(searchNameVal,'<span class=\"searchVal\">'+searchNameVal+'</span>')+\"</li>\";\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t$autoComplete.html(html).fadeIn(300);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\terror: function(jqxhr, textStatus, errorThrown){\r\n");
      out.write("\t\t\t\t\tconsole.log(\"ajax처리 실패!\",jqxhr,textStatus, errorThrown);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});//end of ajax\r\n");
      out.write("\t\t}//end of else\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t//이벤트버블링(자식 => 부모)을 이용한 처리\r\n");
      out.write("\t\t//요소를 선택한 경우\r\n");
      out.write("\t\t$autoComplete.on('click','li',e=>{\r\n");
      out.write("\t\t\t//화살표함수에서는 this가 무조건 window를 가리킨다.\r\n");
      out.write("\t\t\t$(\"#searchName\").val($(e.target).text());\r\n");
      out.write("\t\t\t$autoComplete.hide().children().remove();\r\n");
      out.write("\t\t}).on('mouseover','li', e=>{\r\n");
      out.write("\t\t\t$(e.target).addClass(\"sel\").siblings().removeClass(\"sel\");\r\n");
      out.write("\t\t}).on('mouseout','li',e=>{\r\n");
      out.write("\t\t\t$(e.target).removeClass(\"sel\");\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>ajax::jquery::autoComplete</h1>\r\n");
      out.write("\t<h2>친구 검색</h2>\r\n");
      out.write("\t<div class=\"wrapper\">\t\r\n");
      out.write("\t\t<input type=\"text\" id=\"searchName\" />\r\n");
      out.write("\t\t<ul id=\"autoComplete\"></ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"list\"></div>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
